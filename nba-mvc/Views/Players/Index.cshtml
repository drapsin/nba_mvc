@{
    ViewData["Title"] = "Players";
}

<h1>Players</h1>

<div x-data="playerPagination()" x-init="init()" x-cloak class="mt-4">
    <!-- Pagination Controls -->
    <div class="mb-3 d-flex gap-2 align-items-center">
        <button class="btn btn-primary" x-on:click="prevPage" :disabled="page === 1">Previous</button>
        <span>Page <span x-text="page"></span> of <span x-text="totalPages"></span></span>
        <button class="btn btn-primary" x-on:click="nextPage" :disabled="page === totalPages">Next</button>
    </div>

    <!-- Filters -->
    <div class="mb-4 d-flex gap-3 align-items-center">
        <input type="text" class="form-control" placeholder="Search by name" x-model="searchQuery" style="max-width: 300px;">

        <select class="form-select" x-model="selectedPosition" style="max-width: 150px;">
            <option value="">All Positions</option>
            <template x-for="pos in positions" :key="pos">
                <option x-text="pos"></option>
            </template>
        </select>

        <select class="form-select" x-model="selectedTeam" style="max-width: 200px;">
            <option value="">All Teams</option>
            <template x-for="team in teams" :key="team">
                <option x-text="team"></option>
            </template>
        </select>

        <input type="number" class="form-control" placeholder="Age" x-model.number="searchAge" style="max-width: 100px;">
    </div>

    <!-- Loading -->
    <template x-if="loading">
        <p>Loading players...</p>
    </template>

    <!-- Player Table -->
    <table class="table table-hover">
        <thead class="table-light">
            <tr>
                <th x-on:click="sortBy('firstName')" style="cursor:pointer">
                    First Name <template x-if="sortKey === 'firstName'"><span x-text="sortAsc ? ' ↑' : ' ↓'"></span></template>
                </th>
                <th x-on:click="sortBy('lastName')" style="cursor:pointer">
                    Last Name <template x-if="sortKey === 'lastName'"><span x-text="sortAsc ? ' ↑' : ' ↓'"></span></template>
                </th>
                <th x-on:click="sortBy('position')" style="cursor:pointer">
                    Position <template x-if="sortKey === 'position'"><span x-text="sortAsc ? ' ↑' : ' ↓'"></span></template>
                </th>
                <th x-on:click="sortBy('team')" style="cursor:pointer">
                    Team <template x-if="sortKey === 'team'"><span x-text="sortAsc ? ' ↑' : ' ↓'"></span></template>
                </th>
                <th x-on:click="sortBy('age')" style="cursor:pointer">
                    Age <template x-if="sortKey === 'age'"><span x-text="sortAsc ? ' ↑' : ' ↓'"></span></template>
                </th>
                <th>Image</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <template x-for="player in paginatedPlayers" :key="player.id">
                <tr>
                    <td x-text="player.firstName"></td>
                    <td x-text="player.lastName"></td>
                    <td x-text="player.position"></td>
                    <td x-text="player.team"></td>
                    <td x-text="player.age"></td>
                    <td>
                        <img loading="lazy" decoding="async" :src="player.imageUrl || '/image/fallback-image.png'"
                             alt="Player Image" width="50" height="50" class="img-thumbnail" style="object-fit: cover;" />
                    </td>
                    <td>
                        <a class="text-decoration-none" :href="`/Players/Edit/${player.id}`">Edit</a> |
                        <a class="text-decoration-none" :href="`/Players/Details/${player.id}`">Details</a> |
                        <a class="text-decoration-none text-danger" :href="`/Players/Delete/${player.id}`">Delete</a>
                    </td>
                </tr>
            </template>
        </tbody>
    </table>
</div>

<template x-if="filteredPlayers.length === 0 && !loading">
    <p class="text-muted">No players match the selected filters.</p>
</template>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

<!-- Alpine Component Logic -->
<script>
    function playerPagination() {
        return {
            players: [],
            page: 1,
            perPage: 9,
            loading: true,
            sortKey: 'firstName',
            sortAsc: true,
            searchQuery: '',
            selectedPosition: '',
            selectedTeam: '',
            searchAge: '',
            positions: [],
            teams: [],

            async init() {
                console.log("Initializing component...");
                try {
                    const response = await fetch('/api/players');
                    const data = await response.json();
                    console.log("Raw API response:", data);

                    this.players = data;
                    this.positions = [...new Set(this.players.map(p => p.position))].sort();
                    this.teams = [...new Set(this.players.map(p => p.team))].sort();

                    this.sortBy(this.sortKey);
                } catch (error) {
                    console.error("Failed to fetch players", error);
                } finally {
                    this.loading = false;
                }
            },

            sortBy(key) {
                if (this.sortKey === key) {
                    this.sortAsc = !this.sortAsc;
                } else {
                    this.sortKey = key;
                    this.sortAsc = true;
                }

                this.players.sort((a, b) => {
                    const aVal = (a[key] || '').toString().toLowerCase();
                    const bVal = (b[key] || '').toString().toLowerCase();
                    if (aVal < bVal) return this.sortAsc ? -1 : 1;
                    if (aVal > bVal) return this.sortAsc ? 1 : -1;
                    return 0;
                });
            },

                get totalPages() {
        const total = Math.ceil(this.filteredPlayers.length / this.perPage);
        return total < 1 ? 1 : total;
    }
    ,

                get paginatedPlayers() {
        if (this.page < 1) this.page = 1;
        if (this.page > this.totalPages) this.page = this.totalPages;

        const start = (this.page - 1) * this.perPage;
        return this.filteredPlayers.slice(start, start + this.perPage);
    }
    ,

            get filteredPlayers() {
                return this.players.filter(p => {
                    const fullName = `${p.firstName} ${p.lastName}`.toLowerCase();
                    const nameMatch = fullName.includes(this.searchQuery.toLowerCase());
                    const positionMatch = this.selectedPosition === '' || p.position === this.selectedPosition;
                    const teamMatch = this.selectedTeam === '' || p.team === this.selectedTeam;
                    const ageMatch = this.searchAge === '' || p.age === this.searchAge;
                    return nameMatch && positionMatch && teamMatch && ageMatch;
                });
            },

            nextPage() {
                if (this.page < this.totalPages) this.page++;
            },

            prevPage() {
                if (this.page > 1) this.page--;
            }
        };
    }
</script>